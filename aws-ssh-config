#!/usr/bin/env python

import argparse
import re
import sys
import boto.ec2

UNKNOWN_AMI_USER = 'ubuntu'

AMIS_TO_USER = {
    'amzn': 'ec2-user',
    'ubuntu': 'ubuntu',
    'CentOS': 'root',
    'DataStax': 'ubuntu',
    'CoreOS': 'core',
    '.*': 'ubuntu'
}

BLACKLISTED_REGIONS = [
    'cn-north-1',
    'us-gov-west-1'
]

def generate_id(instance, tags_filter, region):
    id = ''

    if tags_filter is not None:
        for tag in tags_filter.split(','):
            value = instance.tags.get(tag, None)
            if value:
                if not id:
                    id = value
                else:
                    id += '-' + value
    else:
        for tag, value in instance.tags.iteritems():
            if not tag.startswith('aws'):
                if not id:
                    id = value
                else:
                    id += '-' + value

    if not id:
        id = instance.id

    if region:
        id += '-' + instance.placement

    return id


def sshconf_host_entry(id, ip, instance, args, amis):
    print 'Host ' + id
    print '    HostName ' + ip
    print '    ServerAliveInterval 600'

    try:
        if args.ssh_user:
            print '    User ' + args.ssh_user
        elif amis[instance.image_id] is not None:
            print '    User ' + amis[instance.image_id]
    except:
        sys.stderr.write("Can't find user for host %s" % id)
        pass

    if args.ssh_key:
        print '    IdentityFile %s' % args.ssh_key
    else:
        print '    IdentityFile ~/.ssh/' + instance.key_name + '.pem'

    # just for me, removing this is usually a good choice
    print '    StrictHostKeyChecking no'
    print


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--tags', help='A comma-separated list of tag names to be considered for concatenation. If omitted, all tags will be used')
    parser.add_argument('--region', action='store_true',
                        help='Append the region name at the end of the concatenation')
    parser.add_argument('--private', action='store_true',
                        help='Also add a private IP addresses dns, prefixed with `-int` (public are used by default)')
    parser.add_argument('--ssh-key', help='Personal SSH key that should be used for connection. Default=~/.ssh/optiprod.pem')
    parser.add_argument('--ssh-user', help='Personal SSH user that should be used for connection. If you choose ssh-key you must also specify this argument.')
    args = parser.parse_args()

    if (args.ssh_key and not args.ssh_user):
       print "When you specify a personal ssh key please also define your ssh user!"
       sys.exit(1)

    instances = {}
    counts_total = {}
    counts_incremental = {}
    amis = {}

    for region in boto.ec2.regions():
        if region.name in BLACKLISTED_REGIONS:
            continue

        conn = boto.ec2.connect_to_region(region.name)

        for instance in conn.get_only_instances():
            if instance.state == 'running' and not instance.platform == 'windows':
                if instance.launch_time not in instances:
                    instances[instance.launch_time] = []

                instances[instance.launch_time].append(instance)

                id = generate_id(instance, args.tags, args.region)

                if id not in counts_total:
                    counts_total[id] = 0
                    counts_incremental[id] = 0

                counts_total[id] += 1

                if not instance.image_id in amis:
                    image = conn.get_image(instance.image_id)
                    if image is None:
                        amis[instance.image_id] = UNKNOWN_AMI_USER
                        continue

                    for ami, user in AMIS_TO_USER.iteritems():
                        regexp = re.compile(ami)
                        if image and regexp.match(image.name):
                            amis[instance.image_id] = user
                            break

                    if image and instance.image_id not in amis:
                        amis[instance.image_id] = None
                        sys.stderr.write(
                            'Can\'t lookup user for AMI \'' + image.name + '\', add a rule to the script\n')

    for k in sorted(instances):
        for instance in instances[k]:
            if instance.ip_address:
                ip = instance.ip_address

            id = generate_id(instance, args.tags, args.region)

            if counts_total[id] != 1:
                counts_incremental[id] += 1
                id += '-' + str(counts_incremental[id])

            sshconf_host_entry(id, ip, instance, args, amis)

            if args.private:
                if instance.private_ip_address:
                    priv_ip = instance.private_ip_address
                    sshconf_host_entry(id + '-int', priv_ip, instance, args, amis)


if __name__ == '__main__':
    main()
